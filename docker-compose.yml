version: '3'
#https://github.com/simplesteph/kafka-stack-docker-compose/blob/master/full-stack.yml
services:
  postgres:
    container_name: postgres
    image: postgres:11
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
    - './data/postgres:/var/lib/postgresql/data'
    - './aircraft-database.csv:/data/aircraft-database.csv'
    - './aircraft-database.sql:/data/aircraft-database.sql'
    ports:
    - 5432:5432
    networks:
    - fit

  cassandra:
    container_name: cassandra
    image: cassandra:3.11
    cap_add:
    - IPC_LOCK
    ulimits:
      memlock: -1
      nofile: 100000
      nproc: 32768
    ports:
    - 9042:9042
    networks:
    - fit
    volumes:
    - './data/cassandra:/var/lib/cassandra'

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.2.2
    hostname: zookeeper
    networks:
    - fit
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
    - 2181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:5.2.2
    hostname: kafka
    depends_on:
    - zookeeper
    networks:
    - fit
    ports:
    - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # automatically create kafka topics => topic1 = 1 partition, 3 replicas, topic2 = 1 partition, 1 replicas, cleanup.policy=compact
      KAFKA_CREATE_TOPICS: "quickstart-avro-offsets:1:1,quickstart-avro-config:1:1,quickstart-avro-status:1:1"

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.2.2
    networks:
    - fit
    ports:
    - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-connect-avro:
    container_name: kafka-connect-avro
    image: confluentinc/cp-kafka-connect:latest
    networks:
    - fit
    volumes:
    - /tmp/quickstart/jars:/etc/kafka-connect/jars
    - /tmp/quickstart/file:/tmp/quickstart
    ports:
    - 8083:8083
    depends_on:
    - zookeeper
    - kafka
    - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:19092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: quickstart-avro
      CONNECT_CONFIG_STORAGE_TOPIC: quickstart-avro-config
      CONNECT_OFFSET_STORAGE_TOPIC: quickstart-avro-offsets
      CONNECT_STATUS_STORAGE_TOPIC: quickstart-avro-status
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: DEBUG
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'

networks:
  fit:
